class CalculatorHub {
    constructor() {
        this.calculators = [];
        this.allCalculators = [];
        this.init();
    }

    async init() {
        await this.loadCalculators();
        this.setupEventListeners();
        this.renderCalculators();
    }

    /**
     * Fetches the calculator manifest from the 'calculators.json' file.
     * This file is automatically generated by the GitHub Action.
     */
    async loadCalculators() {
        try {
            // This is the new code: Fetch the list from the JSON file.
            const response = await fetch('calculators.json');
            if (!response.ok) {
                throw new Error(`Failed to load calculators.json. Status: ${response.status}`);
            }
            const calculatorList = await response.json();
            
            this.calculators = calculatorList;
            this.allCalculators = [...calculatorList];
        } catch (error) {
            console.error('Error loading calculators:', error);
            // Display an error message to the user on the page.
            const calculatorGrid = document.getElementById('calculatorGrid');
            if (calculatorGrid) {
                calculatorGrid.innerHTML = `<p class="error-message">Could not load the list of calculators. Please check the console for errors.</p>`;
            }
        }
    }

    setupEventListeners() {
        const searchInput = document.getElementById('searchInput');
        const searchBtn = document.querySelector('.search-btn');
        const mobileMenuToggle = document.querySelector('.mobile-menu-toggle');
        const nav = document.querySelector('.nav');

        // Search functionality
        if (searchInput) {
            searchInput.addEventListener('input', (e) => {
                this.searchCalculators(e.target.value);
            });
        }

        if (searchBtn) {
            searchBtn.addEventListener('click', () => {
                this.searchCalculators(searchInput.value);
            });
        }

        // Mobile menu toggle
        if (mobileMenuToggle && nav) {
            mobileMenuToggle.addEventListener('click', () => {
                nav.classList.toggle('is-open');
            });
        }

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    }

    searchCalculators(query) {
        const lowerCaseQuery = query.toLowerCase();
        const filteredCalculators = this.allCalculators.filter(calc => 
            calc.name.toLowerCase().includes(lowerCaseQuery) ||
            calc.description.toLowerCase().includes(lowerCaseQuery) ||
            calc.category.toLowerCase().includes(lowerCaseQuery)
        );

        this.calculators = filteredCalculators;
        this.renderCalculators();
        
        // Show/hide no results message
        const noResults = document.getElementById('noResults');
        if (noResults) {
            noResults.style.display = filteredCalculators.length === 0 ? 'block' : 'none';
        }
    }

    renderCalculators() {
        const calculatorGrid = document.getElementById('calculatorGrid');
        if (!calculatorGrid) return;

        calculatorGrid.innerHTML = '';

        if (this.calculators.length === 0) {
            // This can happen if the fetch fails or the list is empty.
            return;
        }

        this.calculators.forEach(calculator => {
            const calculatorCard = this.createCalculatorCard(calculator);
            calculatorGrid.appendChild(calculatorCard);
        });
    }

    createCalculatorCard(calculator) {
        const card = document.createElement('div');
        card.className = 'calculator-card';
        
        card.innerHTML = `
            <h3>${calculator.name}</h3>
            <p>${calculator.description}</p>
            <a href="tools/${calculator.fileName}" class="try-btn">Try Now</a>
        `;

        return card;
    }
}

// Initialize the application when the DOM is fully loaded.
document.addEventListener('DOMContentLoaded', () => {
    new CalculatorHub();
});
